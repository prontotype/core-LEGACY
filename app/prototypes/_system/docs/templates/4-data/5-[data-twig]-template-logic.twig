{% extends "_layouts/skeleton.twig" %}

{% set content %}

# Using template logic in data files

Both local data files and data retrieved from remote sources are run through the Twig parser. This means that you can use any of Twigs advanced templating functionality to help create your data files, as well as your page templates.

## Dynamic variables

To make things a bit more dynamic, the [`pt.data.get()` method]({{ pt.pages.getUrlById('template-ref-data') }}#data-get) allows you to pass in an optional set of variables that your data files can work with. Unlike regular page templates, the data files **do not** have access to any of the [Prontotype-specific variables]({{ pt.pages.getUrlById('templating-reference') }}); so trying to access any of the `pt.*` template methods will **not have any effect**.

This means that any dynamic information your data files require will have to be passed in from the page template that they are called from.

## Including/extending other files

**Locally stored data files** (but **NOT** ones fetched from an external source) can also use Twig's [include](http://twig.sensiolabs.org/doc/tags/include.html) and [extends](http://twig.sensiolabs.org/doc/tags/extends.html) methods to pull in other files from within your prototypes' data directory. This can be useful when creating multiple data files that need to share a 'layout' - for instance XML files with a common header/footer etc.

All include/extends paths will need to be taken **relative to the prototype's `/data` directory**. 

{% endset %}